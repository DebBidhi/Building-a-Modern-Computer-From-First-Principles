// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Not(in=instruction[15], out=ni); 			//takes only 16th bit
	Mux16(a=O2ALU, b=instruction, sel=ni, out=inA);	//takes full instruction[0..15]
	And(a=instruction[15], b=instruction[5], out=c0);
	Or(a=ni, b=c0, out=loadA);
	ARegister(in=inA, load=loadA,out=outA, out[0..14]=addressM);
	And(a=instruction[15], b=instruction[12], out=loadAM);
	Mux16(a=outA, b=inM, sel=loadAM, out=aluAM);
	ALU(x=outD, y=aluAM, zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=O2ALU,zr=zero,ng=negative);
	And(a=instruction[15],b=instruction[4],out=loadD);
	DRegister(in=O2ALU,load=loadD,out=outD);
	And(a=instruction[15],b=instruction[3],out=writeM);
        
	//jumpFunction
        And(a=negative,b=instruction[2],out=satisfiedJLT);
	Not(in=negative, out=notNegative);
	Not(in=zero, out=possitive);
	And(a=notNegative,b=possitive, out=nonzeropossitive);
	And(a=nonzeropossitive, b=instruction[0], out=satisfiedJGT);
	And(a=zero, b=instruction[1], out=satisfiedZero);
	Or(a=satisfiedJLT,b=satisfiedJGT, out=PossitiveAndNegativeSatisfied);
	Or(a=PossitiveAndNegativeSatisfied,b=satisfiedZero, out=conditionalJumpSatisfied);
	And(a=instruction[0],b=instruction[1],out=ins12);
	And(a=ins12,b=instruction[2],out=ins123);
	Or(a=ins123, b=conditionalJumpSatisfied, out=jumpSatisfiedforAllInstruction);
	And(a=jumpSatisfiedforAllInstruction, b=instruction[15], out=funcJump);
	
	
	
	
	PC(in=outA,load=funcJump,inc=true,reset=reset,out[0..14]=pc);
	







}