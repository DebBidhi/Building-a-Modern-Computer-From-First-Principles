<tokens>
<keyword>class</keyword>
<identifier>Keyboard</identifier>
<symbol>{</symbol>
<keyword>static</keyword>
<keyword>boolean</keyword>
<identifier>pressed</identifier>
<symbol>;</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>init</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>pressed</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>char</keyword>
<identifier>keyPressed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>char</keyword>
<identifier>ch</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>ch</identifier>
<symbol>=</symbol>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>peek</identifier>
<symbol>(</symbol>
<integerConstant>24576</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>&gt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>pressed</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>pressed</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<identifier>ch</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>char</keyword>
<identifier>readChar</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>char</keyword>
<identifier>ch</identifier>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>pressed</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>ch</identifier>
<symbol>=</symbol>
<identifier>Keyboard</identifier>
<symbol>.</symbol>
<identifier>keyPressed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>pressed</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Keyboard</identifier>
<symbol>.</symbol>
<identifier>keyPressed</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>&gt;</symbol>
<integerConstant>32</integerConstant>
<symbol>)</symbol>
<symbol>&amp;</symbol>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>&lt;</symbol>
<integerConstant>126</integerConstant>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printChar</identifier>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<identifier>ch</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<identifier>String</identifier>
<identifier>readLine</identifier>
<symbol>(</symbol>
<identifier>String</identifier>
<identifier>message</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>char</keyword>
<identifier>ch</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>s</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>s</identifier>
<symbol>=</symbol>
<identifier>String</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<integerConstant>256</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<identifier>message</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>=</symbol>
<integerConstant>128</integerConstant>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>ch</identifier>
<symbol>=</symbol>
<identifier>Keyboard</identifier>
<symbol>.</symbol>
<identifier>readChar</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>=</symbol>
<integerConstant>128</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>println</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>=</symbol>
<integerConstant>129</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>backSpace</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>s</identifier>
<symbol>.</symbol>
<identifier>eraseLastChar</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>s</identifier>
<symbol>.</symbol>
<identifier>appendChar</identifier>
<symbol>(</symbol>
<identifier>ch</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<identifier>s</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>int</keyword>
<identifier>readInt</identifier>
<symbol>(</symbol>
<identifier>String</identifier>
<identifier>message</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>String</identifier>
<identifier>i</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>Keyboard</identifier>
<symbol>.</symbol>
<identifier>readLine</identifier>
<symbol>(</symbol>
<identifier>message</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<identifier>i</identifier>
<symbol>.</symbol>
<identifier>intValue</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>