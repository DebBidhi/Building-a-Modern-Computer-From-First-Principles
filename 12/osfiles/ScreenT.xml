<tokens>
<keyword>class</keyword>
<identifier>Screen</identifier>
<symbol>{</symbol>
<keyword>static</keyword>
<keyword>boolean</keyword>
<identifier>color</identifier>
<symbol>;</symbol>
<keyword>static</keyword>
<identifier>Array</identifier>
<identifier>bitVector</identifier>
<symbol>;</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>init</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>bit</identifier>
<symbol>,</symbol>
<identifier>count</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>color</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>bitVector</identifier>
<symbol>=</symbol>
<identifier>Array</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>bit</identifier>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>count</identifier>
<symbol>&lt;</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>bitVector</identifier>
<symbol>[</symbol>
<identifier>count</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>bit</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>bit</identifier>
<symbol>=</symbol>
<identifier>bit</identifier>
<symbol>+</symbol>
<identifier>bit</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>count</identifier>
<symbol>=</symbol>
<identifier>count</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>clearScreen</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>i</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<integerConstant>16384</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>i</identifier>
<symbol>&lt;</symbol>
<integerConstant>24575</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>poke</identifier>
<symbol>(</symbol>
<identifier>i</identifier>
<symbol>,</symbol>
<keyword>false</keyword>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>i</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>setColor</identifier>
<symbol>(</symbol>
<keyword>boolean</keyword>
<identifier>b</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>color</identifier>
<symbol>=</symbol>
<identifier>b</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>drawPixel</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>loc</identifier>
<symbol>,</symbol>
<identifier>bit</identifier>
<symbol>,</symbol>
<identifier>i</identifier>
<symbol>,</symbol>
<identifier>value</identifier>
<symbol>,</symbol>
<identifier>j</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>j</identifier>
<symbol>=</symbol>
<identifier>x</identifier>
<symbol>/</symbol>
<integerConstant>16</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>loc</identifier>
<symbol>=</symbol>
<integerConstant>16384</integerConstant>
<symbol>+</symbol>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>32</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<identifier>j</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>x</identifier>
<symbol>-</symbol>
<symbol>(</symbol>
<identifier>j</identifier>
<symbol>*</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>bit</identifier>
<symbol>=</symbol>
<identifier>bitVector</identifier>
<symbol>[</symbol>
<identifier>i</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>value</identifier>
<symbol>=</symbol>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>peek</identifier>
<symbol>(</symbol>
<identifier>loc</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>color</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>value</identifier>
<symbol>=</symbol>
<identifier>value</identifier>
<symbol>|</symbol>
<identifier>bit</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>value</identifier>
<symbol>=</symbol>
<identifier>value</identifier>
<symbol>&amp;</symbol>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>bit</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>poke</identifier>
<symbol>(</symbol>
<identifier>loc</identifier>
<symbol>,</symbol>
<identifier>value</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>drawLine</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x1</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y1</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>x2</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y2</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>a</identifier>
<symbol>,</symbol>
<identifier>b</identifier>
<symbol>,</symbol>
<identifier>dx</identifier>
<symbol>,</symbol>
<identifier>dy</identifier>
<symbol>,</symbol>
<identifier>adyMinusbdx</identifier>
<symbol>,</symbol>
<identifier>f</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dx</identifier>
<symbol>=</symbol>
<identifier>x2</identifier>
<symbol>-</symbol>
<identifier>x1</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dy</identifier>
<symbol>=</symbol>
<identifier>y2</identifier>
<symbol>-</symbol>
<identifier>y1</identifier>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dy</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>x2</identifier>
<symbol>&gt;</symbol>
<identifier>x1</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawHorizontal</identifier>
<symbol>(</symbol>
<identifier>x1</identifier>
<symbol>,</symbol>
<identifier>x2</identifier>
<symbol>,</symbol>
<identifier>y1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawHorizontal</identifier>
<symbol>(</symbol>
<identifier>x2</identifier>
<symbol>,</symbol>
<identifier>x1</identifier>
<symbol>,</symbol>
<identifier>y1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dx</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>dx</identifier>
<symbol>=</symbol>
<symbol>-</symbol>
<identifier>dx</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>f</identifier>
<symbol>=</symbol>
<identifier>x1</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>x1</identifier>
<symbol>=</symbol>
<identifier>x2</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>x2</identifier>
<symbol>=</symbol>
<identifier>f</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>f</identifier>
<symbol>=</symbol>
<identifier>y1</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>y1</identifier>
<symbol>=</symbol>
<identifier>y2</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>y2</identifier>
<symbol>=</symbol>
<identifier>f</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dy</identifier>
<symbol>=</symbol>
<symbol>-</symbol>
<identifier>dy</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>dy</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>dy</identifier>
<symbol>=</symbol>
<symbol>-</symbol>
<identifier>dy</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>f</identifier>
<symbol>=</symbol>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>f</identifier>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<symbol>(</symbol>
<symbol>(</symbol>
<identifier>a</identifier>
<symbol>&gt;</symbol>
<identifier>dx</identifier>
<symbol>)</symbol>
<symbol>|</symbol>
<symbol>(</symbol>
<identifier>b</identifier>
<symbol>&gt;</symbol>
<identifier>dy</identifier>
<symbol>)</symbol>
<symbol>|</symbol>
<symbol>(</symbol>
<identifier>a</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>|</symbol>
<symbol>(</symbol>
<identifier>b</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawPixel</identifier>
<symbol>(</symbol>
<identifier>x1</identifier>
<symbol>+</symbol>
<identifier>a</identifier>
<symbol>,</symbol>
<identifier>y1</identifier>
<symbol>+</symbol>
<symbol>(</symbol>
<identifier>f</identifier>
<symbol>*</symbol>
<identifier>b</identifier>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>adyMinusbdx</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>a</identifier>
<symbol>=</symbol>
<identifier>a</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>adyMinusbdx</identifier>
<symbol>=</symbol>
<identifier>adyMinusbdx</identifier>
<symbol>+</symbol>
<identifier>dy</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>b</identifier>
<symbol>=</symbol>
<identifier>b</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>adyMinusbdx</identifier>
<symbol>=</symbol>
<identifier>adyMinusbdx</identifier>
<symbol>-</symbol>
<identifier>dx</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>drawHorizontal</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x1</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>x2</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>value1</identifier>
<symbol>,</symbol>
<identifier>value2</identifier>
<symbol>,</symbol>
<identifier>i1</identifier>
<symbol>,</symbol>
<identifier>i2</identifier>
<symbol>,</symbol>
<identifier>j</identifier>
<symbol>,</symbol>
<identifier>bit1</identifier>
<symbol>,</symbol>
<identifier>bit2</identifier>
<symbol>,</symbol>
<identifier>loc1</identifier>
<symbol>,</symbol>
<identifier>loc2</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>j</identifier>
<symbol>=</symbol>
<symbol>(</symbol>
<identifier>x1</identifier>
<symbol>/</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>loc1</identifier>
<symbol>=</symbol>
<integerConstant>16384</integerConstant>
<symbol>+</symbol>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>32</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<identifier>j</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i1</identifier>
<symbol>=</symbol>
<identifier>x1</identifier>
<symbol>-</symbol>
<symbol>(</symbol>
<identifier>j</identifier>
<symbol>*</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>j</identifier>
<symbol>=</symbol>
<symbol>(</symbol>
<identifier>x2</identifier>
<symbol>/</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>loc2</identifier>
<symbol>=</symbol>
<integerConstant>16384</integerConstant>
<symbol>+</symbol>
<symbol>(</symbol>
<identifier>y</identifier>
<symbol>*</symbol>
<integerConstant>32</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<identifier>j</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i2</identifier>
<symbol>=</symbol>
<identifier>x2</identifier>
<symbol>-</symbol>
<symbol>(</symbol>
<identifier>j</identifier>
<symbol>*</symbol>
<integerConstant>16</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>=</symbol>
<identifier>loc2</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>j</identifier>
<symbol>=</symbol>
<identifier>Math</identifier>
<symbol>.</symbol>
<identifier>abs</identifier>
<symbol>(</symbol>
<identifier>i1</identifier>
<symbol>-</symbol>
<identifier>i2</identifier>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i1</identifier>
<symbol>=</symbol>
<identifier>Math</identifier>
<symbol>.</symbol>
<identifier>min</identifier>
<symbol>(</symbol>
<identifier>i1</identifier>
<symbol>,</symbol>
<identifier>i2</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>j</identifier>
<symbol>&gt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>bit1</identifier>
<symbol>=</symbol>
<identifier>bit1</identifier>
<symbol>+</symbol>
<identifier>bitVector</identifier>
<symbol>[</symbol>
<identifier>i1</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>j</identifier>
<symbol>=</symbol>
<identifier>j</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i1</identifier>
<symbol>=</symbol>
<identifier>i1</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>let</keyword>
<identifier>value1</identifier>
<symbol>=</symbol>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>peek</identifier>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>color</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>value1</identifier>
<symbol>=</symbol>
<identifier>value1</identifier>
<symbol>|</symbol>
<identifier>bit1</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>value1</identifier>
<symbol>=</symbol>
<identifier>value1</identifier>
<symbol>&amp;</symbol>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>bit1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>poke</identifier>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>,</symbol>
<identifier>value1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<symbol>(</symbol>
<identifier>i1</identifier>
<symbol>&gt;</symbol>
<integerConstant>15</integerConstant>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>bit1</identifier>
<symbol>=</symbol>
<identifier>bit1</identifier>
<symbol>+</symbol>
<identifier>bitVector</identifier>
<symbol>[</symbol>
<identifier>i1</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i1</identifier>
<symbol>=</symbol>
<identifier>i1</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<symbol>(</symbol>
<identifier>i2</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>bit2</identifier>
<symbol>=</symbol>
<identifier>bit2</identifier>
<symbol>+</symbol>
<identifier>bitVector</identifier>
<symbol>[</symbol>
<identifier>i2</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i2</identifier>
<symbol>=</symbol>
<identifier>i2</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>let</keyword>
<identifier>value1</identifier>
<symbol>=</symbol>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>peek</identifier>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>value2</identifier>
<symbol>=</symbol>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>peek</identifier>
<symbol>(</symbol>
<identifier>loc2</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>color</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>value1</identifier>
<symbol>=</symbol>
<identifier>value1</identifier>
<symbol>|</symbol>
<identifier>bit1</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>value2</identifier>
<symbol>=</symbol>
<identifier>value2</identifier>
<symbol>|</symbol>
<identifier>bit2</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>value1</identifier>
<symbol>=</symbol>
<identifier>value1</identifier>
<symbol>&amp;</symbol>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>bit1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>value2</identifier>
<symbol>=</symbol>
<identifier>value2</identifier>
<symbol>&amp;</symbol>
<symbol>(</symbol>
<symbol>~</symbol>
<identifier>bit2</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>poke</identifier>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>,</symbol>
<identifier>value1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>poke</identifier>
<symbol>(</symbol>
<identifier>loc2</identifier>
<symbol>,</symbol>
<identifier>value2</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>loc1</identifier>
<symbol>=</symbol>
<identifier>loc1</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>&lt;</symbol>
<identifier>loc2</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Memory</identifier>
<symbol>.</symbol>
<identifier>poke</identifier>
<symbol>(</symbol>
<identifier>loc1</identifier>
<symbol>,</symbol>
<identifier>color</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>loc1</identifier>
<symbol>=</symbol>
<identifier>loc1</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>drawRectangle</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>x1</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y1</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>x2</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>y2</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>~</symbol>
<symbol>(</symbol>
<identifier>y1</identifier>
<symbol>&gt;</symbol>
<identifier>y2</identifier>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawHorizontal</identifier>
<symbol>(</symbol>
<identifier>x1</identifier>
<symbol>,</symbol>
<identifier>x2</identifier>
<symbol>,</symbol>
<identifier>y1</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>y1</identifier>
<symbol>=</symbol>
<identifier>y1</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>drawCircle</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>cx</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>cy</identifier>
<symbol>,</symbol>
<keyword>int</keyword>
<identifier>r</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>dy</identifier>
<symbol>,</symbol>
<identifier>root</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dy</identifier>
<symbol>=</symbol>
<symbol>(</symbol>
<symbol>-</symbol>
<identifier>r</identifier>
<symbol>)</symbol>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>dy</identifier>
<symbol>&lt;</symbol>
<identifier>r</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>root</identifier>
<symbol>=</symbol>
<identifier>Math</identifier>
<symbol>.</symbol>
<identifier>sqrt</identifier>
<symbol>(</symbol>
<symbol>(</symbol>
<identifier>r</identifier>
<symbol>*</symbol>
<identifier>r</identifier>
<symbol>)</symbol>
<symbol>-</symbol>
<symbol>(</symbol>
<identifier>dy</identifier>
<symbol>*</symbol>
<identifier>dy</identifier>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawHorizontal</identifier>
<symbol>(</symbol>
<identifier>cx</identifier>
<symbol>-</symbol>
<identifier>root</identifier>
<symbol>,</symbol>
<identifier>cx</identifier>
<symbol>+</symbol>
<identifier>root</identifier>
<symbol>,</symbol>
<identifier>cy</identifier>
<symbol>+</symbol>
<identifier>dy</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>dy</identifier>
<symbol>=</symbol>
<identifier>dy</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawPixel</identifier>
<symbol>(</symbol>
<identifier>cx</identifier>
<symbol>,</symbol>
<identifier>cy</identifier>
<symbol>+</symbol>
<identifier>r</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>Screen</identifier>
<symbol>.</symbol>
<identifier>drawPixel</identifier>
<symbol>(</symbol>
<identifier>cx</identifier>
<symbol>,</symbol>
<identifier>cy</identifier>
<symbol>-</symbol>
<identifier>r</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>