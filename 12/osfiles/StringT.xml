<tokens>
<keyword>class</keyword>
<identifier>String</identifier>
<symbol>{</symbol>
<keyword>field</keyword>
<identifier>Array</identifier>
<identifier>buffer</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>bufferlen</identifier>
<symbol>;</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>strlen</identifier>
<symbol>;</symbol>
<keyword>constructor</keyword>
<identifier>String</identifier>
<identifier>new</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>maxLength</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>maxLength</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>maxLength</identifier>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>let</keyword>
<identifier>buffer</identifier>
<symbol>=</symbol>
<identifier>Array</identifier>
<symbol>.</symbol>
<identifier>new</identifier>
<symbol>(</symbol>
<identifier>maxLength</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>bufferlen</identifier>
<symbol>=</symbol>
<identifier>maxLength</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>strlen</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>return</keyword>
<keyword>this</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>buffer</identifier>
<symbol>.</symbol>
<identifier>dispose</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>length</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>strlen</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>char</keyword>
<identifier>charAt</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>j</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>buffer</identifier>
<symbol>[</symbol>
<identifier>j</identifier>
<symbol>]</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>setCharAt</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>j</identifier>
<symbol>,</symbol>
<keyword>char</keyword>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>buffer</identifier>
<symbol>[</symbol>
<identifier>j</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>c</identifier>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<identifier>String</identifier>
<identifier>appendChar</identifier>
<symbol>(</symbol>
<keyword>char</keyword>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>strlen</identifier>
<symbol>&lt;</symbol>
<identifier>bufferlen</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>buffer</identifier>
<symbol>[</symbol>
<identifier>strlen</identifier>
<symbol>]</symbol>
<symbol>=</symbol>
<identifier>c</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>strlen</identifier>
<symbol>=</symbol>
<identifier>strlen</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<keyword>this</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>eraseLastChar</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>strlen</identifier>
<symbol>&gt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>strlen</identifier>
<symbol>=</symbol>
<identifier>strlen</identifier>
<symbol>-</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>int</keyword>
<identifier>intValue</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>intval</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>i</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifier>neg</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>intval</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<symbol>(</symbol>
<identifier>strlen</identifier>
<symbol>&gt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>&amp;</symbol>
<symbol>(</symbol>
<identifier>buffer</identifier>
<symbol>[</symbol>
<integerConstant>0</integerConstant>
<symbol>]</symbol>
<symbol>=</symbol>
<integerConstant>45</integerConstant>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>neg</identifier>
<symbol>=</symbol>
<keyword>true</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>neg</identifier>
<symbol>=</symbol>
<keyword>false</keyword>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<symbol>(</symbol>
<identifier>i</identifier>
<symbol>&lt;</symbol>
<identifier>strlen</identifier>
<symbol>)</symbol>
<symbol>&amp;</symbol>
<identifier>String</identifier>
<symbol>.</symbol>
<identifier>isdigit</identifier>
<symbol>(</symbol>
<identifier>buffer</identifier>
<symbol>[</symbol>
<identifier>i</identifier>
<symbol>]</symbol>
<symbol>)</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>intval</identifier>
<symbol>=</symbol>
<symbol>(</symbol>
<identifier>intval</identifier>
<symbol>*</symbol>
<integerConstant>10</integerConstant>
<symbol>)</symbol>
<symbol>+</symbol>
<identifier>String</identifier>
<symbol>.</symbol>
<identifier>digitval</identifier>
<symbol>(</symbol>
<identifier>buffer</identifier>
<symbol>[</symbol>
<identifier>i</identifier>
<symbol>]</symbol>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>i</identifier>
<symbol>=</symbol>
<identifier>i</identifier>
<symbol>+</symbol>
<integerConstant>1</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>neg</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<symbol>-</symbol>
<identifier>intval</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>intval</identifier>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>boolean</keyword>
<identifier>isdigit</identifier>
<symbol>(</symbol>
<keyword>char</keyword>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<symbol>~</symbol>
<symbol>(</symbol>
<identifier>c</identifier>
<symbol>&lt;</symbol>
<integerConstant>48</integerConstant>
<symbol>)</symbol>
<symbol>&amp;</symbol>
<symbol>~</symbol>
<symbol>(</symbol>
<identifier>c</identifier>
<symbol>&gt;</symbol>
<integerConstant>57</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>int</keyword>
<identifier>digitval</identifier>
<symbol>(</symbol>
<keyword>char</keyword>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>c</identifier>
<symbol>-</symbol>
<integerConstant>48</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>char</keyword>
<identifier>digitchar</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>i</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<identifier>i</identifier>
<symbol>+</symbol>
<integerConstant>48</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>setInt</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>number</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>strlen</identifier>
<symbol>=</symbol>
<integerConstant>0</integerConstant>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>number</identifier>
<symbol>&lt;</symbol>
<integerConstant>0</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>number</identifier>
<symbol>=</symbol>
<symbol>-</symbol>
<identifier>number</identifier>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>appendChar</identifier>
<symbol>(</symbol>
<integerConstant>45</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>dosetint</identifier>
<symbol>(</symbol>
<identifier>number</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dosetint</identifier>
<symbol>(</symbol>
<keyword>int</keyword>
<identifier>number</identifier>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>q</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>int</keyword>
<identifier>mod</identifier>
<symbol>;</symbol>
<keyword>var</keyword>
<keyword>char</keyword>
<identifier>c</identifier>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>q</identifier>
<symbol>=</symbol>
<identifier>number</identifier>
<symbol>/</symbol>
<integerConstant>10</integerConstant>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>mod</identifier>
<symbol>=</symbol>
<identifier>number</identifier>
<symbol>-</symbol>
<symbol>(</symbol>
<identifier>q</identifier>
<symbol>*</symbol>
<integerConstant>10</integerConstant>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>let</keyword>
<identifier>c</identifier>
<symbol>=</symbol>
<identifier>String</identifier>
<symbol>.</symbol>
<identifier>digitchar</identifier>
<symbol>(</symbol>
<identifier>mod</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>number</identifier>
<symbol>&lt;</symbol>
<integerConstant>10</integerConstant>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>appendChar</identifier>
<symbol>(</symbol>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>dosetint</identifier>
<symbol>(</symbol>
<identifier>q</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<keyword>do</keyword>
<identifier>appendChar</identifier>
<symbol>(</symbol>
<identifier>c</identifier>
<symbol>)</symbol>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>return</keyword>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>char</keyword>
<identifier>newLine</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<integerConstant>128</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>char</keyword>
<identifier>backSpace</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<integerConstant>129</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>char</keyword>
<identifier>doubleQuote</identifier>
<symbol>(</symbol>
<symbol>)</symbol>
<symbol>{</symbol>
<keyword>return</keyword>
<integerConstant>34</integerConstant>
<symbol>;</symbol>
<symbol>}</symbol>
<symbol>}</symbol>
</tokens>